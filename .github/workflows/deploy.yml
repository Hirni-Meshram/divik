name: Build and push deployment images

on:
  push:
    branches:
      - master
      - develop
  schedule:
    - cron: '0 17 * * *'


env:
  MAJOR: ${{ 2 }}
  MINOR: ${{ 5 }}
  FIXUP: ${{ 8 }}
  PACKAGE_INIT_FILE: ${{ 'divik/__init__.py' }}
  PACKAGE_INIT_FILE_VERSION_LINE: ${{ 1 }}
  PACKAGE_SETUP_FILE: ${{ 'setup.py' }}
  PACKAGE_SETUP_FILE_VERSION_LINE: ${{ 9 }}
  DOCKER_REPO: ${{ 'gmrukwa/divik' }}
  IS_ALPHA: ${{ github.event_name == 'pull_request' }}
  IS_BETA: ${{ github.event_name == 'push' && endsWith(github.event.ref, 'heads/develop') }}


jobs:
  push_images:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Embed version to divik.__version__
        uses: ./.github/actions/patch-version
        with:
          packageInitFile: ${{ env.PACKAGE_INIT_FILE }}
          isAlpha: ${{ env.IS_ALPHA }}
          isBeta: ${{ env.IS_BETA }}
          version: ${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.FIXUP }}
          line: ${{ env.PACKAGE_INIT_FILE_VERSION_LINE }}
      - name: Embed version to setup.py
        uses: ./.github/actions/patch-version
        with:
          packageInitFile: ${{ env.PACKAGE_SETUP_FILE }}
          isAlpha: ${{ env.IS_ALPHA }}
          isBeta: ${{ env.IS_BETA }}
          version: ${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.FIXUP }}
          line: ${{ env.PACKAGE_SETUP_FILE_VERSION_LINE }}
      - name: Authenticate to Docker Hub
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
      - name: Build image
        run: |
          docker build \
            --file docker/deploy.dockerfile \
            --tag deployment \
            .
      - name: Push annotated images
        run: |
          if $IS_ALPHA; then
            STAGE=alpha
          elif $IS_BETA; then
            STAGE=beta
          fi
          echo "STAGE=$STAGE"
          docker tag deployment $DOCKER_REPO:$MAJOR.$MINOR.$FIXUP${STAGE:+-$STAGE}
          docker tag deployment $DOCKER_REPO:$MAJOR.$MINOR${STAGE:+-$STAGE}
          docker tag deployment $DOCKER_REPO:$MAJOR${STAGE:+-$STAGE}
          docker push $DOCKER_REPO:$MAJOR.$MINOR.$FIXUP${STAGE:+-$STAGE}
          docker push $DOCKER_REPO:$MAJOR.$MINOR${STAGE:+-$STAGE}
          docker push $DOCKER_REPO:$MAJOR${STAGE:+-$STAGE}
      - name: Push latest image for master branch
        if: github.event_name == 'push' && endsWith(github.event.ref, 'heads/master')
        run: |
          docker tag deployment $DOCKER_REPO:latest
          docker push $DOCKER_REPO:latest

  push_manylinux_pypi_package:

    if: github.event_name != 'schedule'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Embed version to divik.__version__
        uses: ./.github/actions/patch-version
        with:
          packageInitFile: ${{ env.PACKAGE_INIT_FILE }}
          isAlpha: ${{ env.IS_ALPHA }}
          isBeta: ${{ env.IS_BETA }}
          version: ${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.FIXUP }}
          line: ${{ env.PACKAGE_INIT_FILE_VERSION_LINE }}
      - name: Embed version to setup.py
        uses: ./.github/actions/patch-version
        with:
          packageInitFile: ${{ env.PACKAGE_SETUP_FILE }}
          isAlpha: ${{ env.IS_ALPHA }}
          isBeta: ${{ env.IS_BETA }}
          version: ${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.FIXUP }}
          line: ${{ env.PACKAGE_SETUP_FILE_VERSION_LINE }}
      # TODO: Parallelize this as a matrix
      - name: Build Python package
        uses: ./.github/actions/build-python-dist
      - name: Publish Python package
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

  push_windows_pypi_package:

    if: github.event_name != 'schedule'

    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [ '3.6', '3.7', '3.8' ]
      fail-fast: false
    name: Python ${{ matrix.python-version }} Windows build
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Embed version to divik.__version__
        uses: ./.github/actions/patch-version
        with:
          packageInitFile: ${{ env.PACKAGE_INIT_FILE }}
          isAlpha: ${{ env.IS_ALPHA }}
          isBeta: ${{ env.IS_BETA }}
          version: ${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.FIXUP }}
          line: ${{ env.PACKAGE_INIT_FILE_VERSION_LINE }}
      - name: Embed version to setup.py
        uses: ./.github/actions/patch-version
        with:
          packageInitFile: ${{ env.PACKAGE_SETUP_FILE }}
          isAlpha: ${{ env.IS_ALPHA }}
          isBeta: ${{ env.IS_BETA }}
          version: ${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.FIXUP }}
          line: ${{ env.PACKAGE_SETUP_FILE_VERSION_LINE }}
      - name: Install build dependencies
        run: pip install wheel twine
      - name: Install dependencies
        run: pip install -r requirements-base.txt
      - name: Build Python package
        run: pip wheel . -w dist
      - name: Publish Python package
        run: twine upload dist/divik*whl

  push_macos_pypi_package:

    if: github.event_name != 'schedule'

    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [ '3.6', '3.7', '3.8' ]
      fail-fast: false
    name: Python ${{ matrix.python-version }} MacOS build
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Embed version to divik.__version__
        uses: ./.github/actions/patch-version
        with:
          packageInitFile: ${{ env.PACKAGE_INIT_FILE }}
          isAlpha: ${{ env.IS_ALPHA }}
          isBeta: ${{ env.IS_BETA }}
          version: ${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.FIXUP }}
          line: ${{ env.PACKAGE_INIT_FILE_VERSION_LINE }}
      - name: Embed version to setup.py
        uses: ./.github/actions/patch-version
        with:
          packageInitFile: ${{ env.PACKAGE_SETUP_FILE }}
          isAlpha: ${{ env.IS_ALPHA }}
          isBeta: ${{ env.IS_BETA }}
          version: ${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.FIXUP }}
          line: ${{ env.PACKAGE_SETUP_FILE_VERSION_LINE }}
      - name: Install build dependencies
        run: pip install wheel twine
      - name: Install dependencies
        run: pip install -r requirements-base.txt
      - name: Install OpenMP
        run: brew install libomp
      - name: Build Python package
        run: |
          echo "::add-path::/usr/local/opt/llvm/bin"
          echo "::set-env name=C_INCLUDE_PATH::/usr/local/opt/llvm/include:$C_INCLUDE_PATH"
          echo "::set-env name=CPLUS_INCLUDE_PATH::/usr/local/opt/llvm/include:$CPLUS_INCLUDE_PATH"
          echo "::set-env name=LIBRARY_PATH::/usr/local/opt/llvm/lib:/usr/local/opt/libomp/lib:$LIBRARY_PATH"
          echo "::set-env name=DYLD_LIBRARY_PATH::/usr/local/opt/llvm/lib:/usr/local/opt/libomp/lib:$DYLD_LIBRARY_PATH"
          pip wheel . -w dist
        env:
          CC: /usr/local/opt/llvm/bin/clang
          CXX: /usr/local/opt/llvm/bin/clang++
      - name: Publish Python package
        run: twine upload dist/divik*whl
